project(add-lib C CXX Fortran)
enable_language(C)
enable_language(CXX)
enable_language(Fortran)

cmake_minimum_required(VERSION 3.1)

IF(COMMAND CMAKE_POLICY)
  IF(POLICY CMP0026)
      CMAKE_POLICY(SET CMP0026 OLD)
  ENDIF(POLICY CMP0026)
  
  IF(POLICY CMP0046)
      CMAKE_POLICY(SET CMP0046 OLD)
  ENDIF(POLICY CMP0046)
ENDIF(COMMAND CMAKE_POLICY)

SET(ADD_LIB_PACKAGE_VERSION_MAJOR 0)
SET(ADD_LIB_PACKAGE_VERSION_MINOR 0)
SET(ADD_LIB_PACKAGE_VERSION_PATCH 90)
SET(ADD_LIB_RELEASE_DATE "20160314")

SET(ADD_LIB_VERSION_FULL "${ADD_LIB_PACKAGE_VERSION_MAJOR}.${ADD_LIB_PACKAGE_VERSION_MINOR}.${ADD_LIB_PACKAGE_VERSION_PATCH}-${ADD_LIB_RELEASE_DATE}")

#SET(CPACK_GENERATOR DEB)
SET(CPACK_PACKAGE_NAME "add-lib")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Additional libraries")
SET(CPACK_PACKAGE_VENDOR "Brain Imaging Center, Montreal Neurological Institute, McGill University")
SET(CPACK_PACKAGE_VERSION_MAJOR ${ADD_LIB_PACKAGE_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${ADD_LIB_PACKAGE_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${ADD_LIB_PACKAGE_VERSION_PATCH})
SET(CPACK_PACKAGE_CONTACT "Vladimir Fonov <vladmir.fonov@gmail.com>")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "minc-toolkit-${ADD_LIB_VERSION_FULL}")
SET(CPACK_MONOLITHIC_INSTALL ON)
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING.txt")
SET(CPACK_PACKAGE_RELOCATABLE OFF)

#IF (CMAKE_SYSTEM_PROCESSOR MATCHES "unknown")
EXEC_PROGRAM(uname ARGS "-m" OUTPUT_VARIABLE CMAKE_SYSTEM_PROCESSOR)
#ENDIF (CMAKE_SYSTEM_PROCESSOR MATCHES "unknown")

IF(NOT DEFINED CPACK_SYSTEM_NAME)
  SET(MT_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
ENDIF(NOT DEFINED CPACK_SYSTEM_NAME)

IF(${CMAKE_SYSTEM_NAME} MATCHES Windows)
  IF(CMAKE_CL_64)
    SET(MT_SYSTEM_NAME win64-${CMAKE_SYSTEM_PROCESSOR})
  ELSE(CMAKE_CL_64)
    SET(MT_SYSTEM_NAME win32-${CMAKE_SYSTEM_PROCESSOR})
  ENDIF(CMAKE_CL_64)
ELSE(${CMAKE_SYSTEM_NAME} MATCHES Windows)
  IF(${CMAKE_SYSTEM_NAME} MATCHES Linux )
    EXEC_PROGRAM(lsb_release ARGS "-s -i" OUTPUT_VARIABLE SYSTEM_ID)
    EXEC_PROGRAM(lsb_release ARGS "-s -r" OUTPUT_VARIABLE SYSTEM_RELEASE)
    SET(MT_SYSTEM_NAME "${SYSTEM_ID}_${SYSTEM_RELEASE}-${CMAKE_SYSTEM_PROCESSOR}")
  ENDIF(${CMAKE_SYSTEM_NAME} MATCHES Linux )
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES Windows)

IF( NOT CMAKE_BUILD_TYPE )
   SET( CMAKE_BUILD_TYPE Release )
ENDIF()

SET(CPACK_PACKAGE_FILE_NAME "add-lib-${ADD_LIB_VERSION_FULL}-${MT_SYSTEM_NAME}")

# register local modules
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_SOURCE_DIR}/cmake-modules")

INCLUDE(PreventInSourceBuilds)
AssureOutOfSourceBuilds(add-lib)
INCLUDE(InstallManPages)

# default install directories
SET(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR} CACHE PATH "Install path prefix, prepended onto install directories.")
SET(CPACK_SET_DESTDIR    ON)
SET(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
SET(CPACK_STRIP_FILES    ON)

# MAC OS X magick
SET(MACOSX_RPATH  ON)
SET(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX})
SET(CMAKE_SKIP_RPATH OFF)
SET(CMAKE_SKIP_INSTALL_RPATH OFF)
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)

# superbuild options

ENABLE_TESTING()
INCLUDE(CTest)


# for superbuild
SET(USE_SUPERBUILD ON)
INCLUDE(ExternalProject)
INCLUDE(ConfigureExternalProjects)
SET(SUPERBUILD_STAGING_PREFIX ${CMAKE_BINARY_DIR}/external)


INCLUDE(BuildBOOST)
build_BOOST(${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX})

INCLUDE(BuildOpenBLAS)
build_open_blas(${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX})


INSTALL(DIRECTORY ${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/bin
        DESTINATION .
        PATTERN *
        PERMISSIONS OWNER_EXECUTE OWNER_READ OWNER_WRITE GROUP_EXECUTE
        GROUP_READ WORLD_READ WORLD_EXECUTE 
)

INSTALL(DIRECTORY
	${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}
        DESTINATION .)

INSTALL(DIRECTORY
	${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/include
        DESTINATION .)

# do we really need to install share?
#INSTALL(DIRECTORY
#	${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/share
#        DESTINATION .)


# setup additional variables for making Debian package
INCLUDE(DebianPackageAddons)

# setup additional variables for making RPM package
INCLUDE(RPMPackageAddons)


# according to http://www.cmake.org/pipermail/cmake/2011-November/047137.html it's better to put this in the end
INCLUDE(CPack)
